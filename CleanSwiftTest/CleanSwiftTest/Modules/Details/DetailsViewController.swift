//
//  DetailsViewController.swift
//  CleanSwiftTest
//
//  Created by Dave on 5/19/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailsDisplayLogic: class {
    func displayData(item: DetailsModel.Item.ViewModel)
    func routeToMain()
}

class DetailsViewController: UIViewController, DetailsDisplayLogic {
    
    var interactor: DetailsBusinessLogic?
    var router: (NSObjectProtocol & DetailsRoutingLogic)?
    var item: Places?
    
    private var mainTitle: UILabel = {
        let label = UILabel()
        label.font = UIFont.boldSystemFont(ofSize: 30)
        return label
    }()
    
    private var details: UILabel = {
        let label = UILabel()
        return label
    }()
    
    private var image: UIImageView = {
        let imageView = UIImageView()
        imageView.contentMode = .scaleAspectFill
        return imageView
    }()
    
    private var deleteBtn: UIButton = {
        let btn = UIButton()
        btn.setTitle("Delete Item", for: .normal)
        btn.titleLabel?.textColor = .white
        btn.titleLabel?.textAlignment = .center
        btn.backgroundColor = .red
        btn.layer.cornerRadius = 8
        btn.clipsToBounds = true
        return btn
    }()
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
    }
    
    // MARK: Setup
    
    public func setup(index: Int)
    {
        let viewController = self
        let interactor = DetailsInteractor()
        let presenter = DetailsPresenter()
        let router = DetailsRouter()
        let worker = DetailsWorker()
        let dbWorker = CoreDataManager.shared
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.dbWorker = dbWorker
        interactor.index = index
        interactor.worker = worker
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        setUpView()
        interactor?.fetchData()
    }
     
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        setUpConstraints()
    }
    //MARK: SetUp Views
    
    private func setUpView() {
        view.addSubview(details)
        view.addSubview(image)
        view.addSubview(mainTitle)
        view.addSubview(deleteBtn)
        deleteBtn.addTarget(self, action: #selector(deleteAction), for: .touchUpInside)
        
    }
    
    //MARK: Constraints
    
    private func setUpConstraints() {
        mainTitle.snp.makeConstraints{(make) in
            make.centerX.equalToSuperview()
            make.top.equalToSuperview().offset(120)
        }
        image.snp.makeConstraints{(make) in
            make.centerX.equalToSuperview()
            make.width.equalTo(220)
            make.height.equalTo(200)
            make.top.equalTo(mainTitle.snp.bottom).offset(30)
        }
        details.snp.makeConstraints{(make) in
            make.centerX.equalToSuperview()
            make.top.equalTo(image.snp.bottom).offset(30)
        }
        deleteBtn.snp.makeConstraints{(make) in
            make.centerX.equalToSuperview()
            make.width.equalTo(220)
            make.height.equalTo(50)
            make.bottom.equalToSuperview().inset(50)
        }
    }
    
    func displayData(item: DetailsModel.Item.ViewModel) {
        DispatchQueue.main.async {[weak self] in
            self?.mainTitle.text = item.title
            self?.details.text = item.details 
            self?.image.image = UIImage(data: item.image)
        }
    }
    
    @objc func deleteAction(_ sender: UIButton) { 
        interactor?.deleteItem()
    }
    
    func routeToMain() {
        router?.routeBackToMain()
    }
}
